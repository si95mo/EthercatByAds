<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EthercatByAds</name>
    </assembly>
    <members>
        <member name="T:EthercatByAds.Ads">
            <summary>
            Handle the communication with a Beckhoff PLC using Ads protocol
            </summary>
        </member>
        <member name="P:EthercatByAds.Ads.Initialized">
            <summary>
            The initialized status (<see langword="true"/> if the initialization has been completed, <see langword="false"/> otherwise)
            </summary>
        </member>
        <member name="P:EthercatByAds.Ads.IsInError">
            <summary>
            The communication status (<see langword="true"/> if the communication is in error, <see langword="false"/> otherwise)
            </summary>
        </member>
        <member name="P:EthercatByAds.Ads.ReasonOfFailure">
            <summary>
            The reason of Ads communication failure
            </summary>
            <remarks>
            If the communication is up, the value will be <see cref="F:System.String.Empty"/>
            </remarks>
        </member>
        <member name="M:EthercatByAds.Ads.Initialize(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Char)">
            <summary>
            Initialize the communication with the PLC and create the communication channels
            </summary>
            <remarks>
            This method is an asynchronous <see cref="T:System.Threading.Tasks.Task`1"/> so, in order to get the result,
            it should be awaited (or <see cref="P:System.Threading.Tasks.Task`1.Result"/> should be used)
            </remarks>
            <param name="amsNetAddress">The PLC's AMS net address</param>
            <param name="port">The port number</param>
            <param name="pollingInterval">The polling interval (in milliseconds)</param>
            <param name="reconnnectionInterval">The reconnection interval between each attempt (in milliseconds)</param>
            <param name="analogInputsPath">The analog input channels (csv) file path</param>
            <param name="analogOutputsPath">The analog output channels (csv) file path</param>
            <param name="digitalInputsPath">The digital input channels (csv) file path</param>
            <param name="digitalOutputsPath">The digital output channels (csv) file path</param>
            <param name="delimiter">The (csv) channels file delimiter <see cref="T:System.Char"/></param>
            <returns>
            The (async) initialization <see cref="T:System.Threading.Tasks.Task`1"/> (in which the <see cref="T:System.Threading.Tasks.Task"/>'s result
            will be <see langword="true"/> if the initialization completed successfully, <see langword="false"/> otherwise)
            </returns>
        </member>
        <member name="M:EthercatByAds.Ads.Stop">
            <summary>
            Stop the Ads communication with the PLC
            </summary>
            <returns><see langword="true"/> if the communication stopped successfully, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:EthercatByAds.Ads.Write(System.String,System.Double)">
            <summary>
            Write a new value to the PLC's variable
            </summary>
            <remarks>
            If the <see cref="M:EthercatByAds.Ads.Initialize(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Char)"/> method has not been called, the
            return value will be <see langword="default"/> (<see cref="T:System.Double"/> or <see cref="T:System.Boolean"/>)!
            </remarks>
            <param name="variableName">The variable name</param>
            <param name="value">The value to write</param>
            <returns>
            <see langword="true"/> if the resource is running and the operation completed,
            <see langword="false"/> if a communication error occurred or <paramref name="variableName"/> is not found
            </returns>
        </member>
        <member name="M:EthercatByAds.Ads.Write(System.String,System.Boolean)">
            <summary>
            Write a new value to the PLC's variable
            </summary>
            <remarks>
            If the <see cref="M:EthercatByAds.Ads.Initialize(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Char)"/> method has not been called, the
            return value will be <see langword="default"/> (<see cref="T:System.Double"/> or <see cref="T:System.Boolean"/>)!
            </remarks>
            <param name="variableName">The variable name</param>
            <param name="value">The value to write</param>
            <returns>
            <see langword="true"/> if the resource is running and the operation completed,
            <see langword="false"/> if a communication error occurred or <paramref name="variableName"/> is not found
            </returns>
        </member>
        <member name="M:EthercatByAds.Ads.Read(System.String,System.Double@)">
            <summary>
            Read a variable from the PLC
            </summary>
            <remarks>
            If the <see cref="M:EthercatByAds.Ads.Initialize(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Char)"/> method has not been called, the
            return value will be <see cref="T:System.Double"/>'s <see langword="default"/>!
            </remarks>
            <param name="variableName">The variable name</param>
            <param name="valueRead">The value read from the PLC</param>
            <returns>
            <see langword="true"/> if the resource is running and the operation completed,
            <see langword="false"/> if a communication error occurred or <paramref name="variableName"/> is not found
            </returns>
        </member>
        <member name="M:EthercatByAds.Ads.Read(System.String,System.Boolean@)">
            <summary>
            Read a variable from the PLC
            </summary>
            <remarks>
            If the <see cref="M:EthercatByAds.Ads.Initialize(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Char)"/> method has not been called, the
            return value will be <see cref="T:System.Boolean"/>'s <see langword="default"/>!
            </remarks>
            <param name="variableName">The variable name</param>
            <param name="valueRead">The value read from the PLC</param>
            <returns>
            <see langword="true"/> if the resource is running and the operation completed,
            <see langword="false"/> if a communication error occurred or <paramref name="variableName"/> is not found
            </returns>
        </member>
        <member name="M:EthercatByAds.Ads.HandleError(System.String)">
            <summary>
            Handle an error status
            </summary>
            <param name="reasonOfFailure">The reason of failure</param>
        </member>
        <member name="M:EthercatByAds.Ads.CreateNewReconnectingTask(System.Int32)">
            <summary>
            Create an async <see cref="T:System.Threading.Tasks.Task"/> that attempt to reconnect the
            <see cref="T:Hardware.Twincat.TwincatResource"/> to the PLC
            </summary>
            <param name="reconnectionInterval">The reconnection interval (in milliseconds)</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:EthercatByAds.Ads.HandleStatusChange">
            <summary>
            Update the <see cref="P:EthercatByAds.Ads.ReasonOfFailure"/> and <see cref="P:EthercatByAds.Ads.IsInError"/> values
            </summary>
        </member>
        <member name="M:EthercatByAds.Ads.Status_ValueChanged(System.Object,Core.ValueChangedEventArgs)">
            <summary>
            Update the <see cref="P:EthercatByAds.Ads.ReasonOfFailure"/> value
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The <see cref="T:Core.ValueChangedEventArgs"/></param>
        </member>
        <member name="T:EthercatByAds.ChannelEntry">
            <summary>
            Describe a channel that has been read from the configuration file
            </summary>
        </member>
        <member name="P:EthercatByAds.ChannelEntry.ChannelCode">
            <summary>
            The channel code (high level name)
            </summary>
        </member>
        <member name="P:EthercatByAds.ChannelEntry.VariableName">
            <summary>
            The PLC variable name (low level)
            </summary>
        </member>
        <member name="M:EthercatByAds.ChannelEntry.#ctor(System.String,System.String)">
            <summary>
            Create a new entry of <see cref="T:EthercatByAds.ChannelEntry"/>
            </summary>
            <param name="channelCode">The channel code</param>
            <param name="variableName">The PLC variable name</param>
        </member>
        <member name="T:EthercatByAds.Parser">
            <summary>
            Static class that parse the channel configuration file
            </summary>
        </member>
        <member name="M:EthercatByAds.Parser.ReadAndParseFile(System.String,System.Char)">
            <summary>
            Read the channels configuration file
            </summary>
            <param name="path">The file path</param>
            <param name="delimiter">The delimiter <see cref="T:System.Char"/></param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> of which the result is a <see cref="T:System.Collections.Generic.List`1"/> with <see cref="T:EthercatByAds.ChannelEntry"/> values.
            If the file specified in <paramref name="path"/> does not exist, then the <see cref="T:System.Threading.Tasks.Task"/> result will be <see langword="null"/>
            </returns>
        </member>
        <member name="M:EthercatByAds.Parser.ReadFileAsync(System.String)">
            <summary>
            Read the channels configuration file
            </summary>
            <param name="path">The file path</param>
            <returns>An array of <see cref="T:System.String"/> with the read text (as the result of an async <see cref="T:System.Threading.Tasks.Task`1"/>)</returns>
        </member>
        <member name="M:EthercatByAds.Parser.ParseFile(System.String[],System.Char)">
            <summary>
            Parse the channels configuration file
            </summary>
            <param name="text">The read text from the file</param>
            <param name="delimiter">The delimiter <see cref="T:System.Char"/></param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with <see cref="T:EthercatByAds.ChannelEntry"/> values</returns>
        </member>
    </members>
</doc>
