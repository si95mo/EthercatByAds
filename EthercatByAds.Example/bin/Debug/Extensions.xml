<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Extensions</name>
    </assembly>
    <members>
        <member name="T:Extensions.ConditionExtensions">
            <summary>
            Provides <see cref="T:Core.Conditions.ICondition"/>-related extension methods
            </summary>
        </member>
        <member name="M:Extensions.ConditionExtensions.IsTrue(Core.Conditions.ICondition)">
            <summary>
            Create a new <see cref="T:Core.Conditions.ICondition"/> that is <see langword="true"/> when <paramref name="source"/> is <see langword="true"/>
            </summary>
            <param name="source">The source <see cref="T:Core.Conditions.ICondition"/></param>
            <returns>The new <see cref="T:Core.Conditions.ICondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.IsFalse(Core.Conditions.ICondition)">
            <summary>
            Create a new <see cref="T:Core.Conditions.ICondition"/> that is <see langword="true"/> when <paramref name="source"/> is <see langword="false"/>
            </summary>
            <param name="source">The source <see cref="T:Core.Conditions.ICondition"/></param>
            <returns>The new <see cref="T:Core.Conditions.ICondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.IsTrue(Core.IProperty{System.Boolean})">
            <summary>
            Create a new <see cref="T:Core.Conditions.ICondition"/> that is <see langword="true"/> when <paramref name="source"/> is <see langword="true"/>
            </summary>
            <param name="source">The source <see cref="T:Core.IProperty`1"/></param>
            <returns>The new <see cref="T:Core.Conditions.ICondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.IsFalse(Core.IProperty{System.Boolean})">
            <summary>
            Create a new <see cref="T:Core.Conditions.ICondition"/> that is <see langword="true"/> when <paramref name="source"/> is <see langword="false"/>
            </summary>
            <param name="source">The source <see cref="T:Core.IProperty`1"/></param>
            <returns>The new <see cref="T:Core.Conditions.ICondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.UpdateIsFalseCondition(Core.Conditions.ICondition,Core.Conditions.FlyweightCondition)">
            <summary>
            Update a <see cref="T:Core.Conditions.FlyweightCondition"/> to check if its value is <see langword="false"/>
            </summary>
            <param name="source">The source <see cref="T:Core.Conditions.ICondition"/></param>
            <param name="newCondition">The <see cref="T:Core.Conditions.FlyweightCondition"/> to update</param>
        </member>
        <member name="M:Extensions.ConditionExtensions.UpdateIfFalseCondition(Core.IProperty{System.Boolean},Core.Conditions.FlyweightCondition)">
            <summary>
            Update a <see cref="T:Core.Conditions.FlyweightCondition"/> to check if its value is <see langword="false"/>
            </summary>
            <param name="source">The source <see cref="T:Core.IProperty`1"/></param>
            <param name="newCondition">The <see cref="T:Core.Conditions.FlyweightCondition"/> to update</param>
        </member>
        <member name="M:Extensions.ConditionExtensions.And(Core.Conditions.ICondition,Core.Conditions.ICondition)">
            <summary>
            Create a <see cref="T:Core.Conditions.FlyweightCondition"/> that concatenates itself with another <see cref="T:Core.Conditions.ICondition"/>
            with an <see langword="and"/> relation
            </summary>
            <param name="source">The source <see cref="T:Core.Conditions.ICondition"/></param>
            <param name="condition">The other condition to which concatenate</param>
            <returns>The concatenated <see cref="T:Core.Conditions.FlyweightCondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.UpdateAndCondition(Core.Conditions.ICondition,Core.Conditions.FlyweightCondition)">
            <summary>
            Update a <see cref="T:Core.Conditions.FlyweightCondition"/> by applying an
            <see langword="and"/> operand between two <see langword="bool"/> values
            </summary>
            <param name="changedCondition">The sender (the <see cref="T:Core.Conditions.ICondition"/> of which the value has changed)</param>
            <param name="andCondition">The <see cref="T:Core.Conditions.FlyweightCondition"/> result of the <see cref="M:Extensions.ConditionExtensions.And(Core.Conditions.ICondition,Core.Conditions.ICondition)"/> method</param>
        </member>
        <member name="M:Extensions.ConditionExtensions.Or(Core.Conditions.ICondition,Core.Conditions.ICondition)">
            <summary>
            Create a <see cref="T:Core.Conditions.FlyweightCondition"/> that concatenates itself with another <see cref="T:Core.Conditions.ICondition"/>
            with an <see langword="or"/> relation
            </summary>
            <param name="source">The source <see cref="T:Core.Conditions.ICondition"/></param>
            <param name="condition">The other condition to which concatenate</param>
            <returns>The concatenated <see cref="T:Core.Conditions.FlyweightCondition"/></returns>
        </member>
        <member name="M:Extensions.ConditionExtensions.UpdateOrCondition(Core.Conditions.ICondition,Core.Conditions.FlyweightCondition)">
            <summary>
            Update a <see cref="T:Core.Conditions.FlyweightCondition"/> by applying an
            <see langword="or"/> operand between two <see langword="bool"/> values
            </summary>
            <param name="changedCondition">The sender (the <see cref="T:Core.Conditions.ICondition"/> of which the value has changed)</param>
            <param name="orCondition">The <see cref="T:Core.Conditions.FlyweightCondition"/> result of the <see cref="M:Extensions.ConditionExtensions.Or(Core.Conditions.ICondition,Core.Conditions.ICondition)"/> method</param>
        </member>
        <member name="T:Extensions.ConsoleExtension">
            <summary>
            Implements <see cref="T:System.Console"/> extensions
            </summary>
        </member>
        <member name="M:Extensions.ConsoleExtension.Clear">
            <summary>
            Clear the <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="M:Extensions.ConsoleExtension.AcquireEnter">
            <summary>
            Capture the enter key submitted by the user
            in the <see cref="T:System.Console"/>
            </summary>
        </member>
        <member name="M:Extensions.ConsoleExtension.SetConsoleTextColor(System.ConsoleColor)">
            <summary>
            Set the <see cref="T:System.Console"/> <see cref="T:System.ConsoleColor"/>
            </summary>
            <param name="color">The <see cref="T:System.ConsoleColor"/></param>
        </member>
        <member name="M:Extensions.ConsoleExtension.ResetConsoleTextColor">
            <summary>
             Reset the <see cref="T:System.Console"/> <see cref="T:System.ConsoleColor"/>
            </summary>
        </member>
        <member name="M:Extensions.ConsoleExtension.AcquireUserInputAsChar">
            <summary>
            Acquire the user input from the <see cref="T:System.Console"/>
            as <see cref="T:System.Char"/>
            </summary>
            <returns>The user input</returns>
            <remarks>
            The method returns <see langword="\0"/> if an
            incorrect input is submitted
            </remarks>
        </member>
        <member name="M:Extensions.ConsoleExtension.AcquireUserInputAsInt(System.Int32)">
            <summary>
            Acquire the user input from the <see cref="T:System.Console"/>
            as <see cref="T:System.Int32"/>
            </summary>
            <param name="numberBase">The number base</param>
            <returns>The user input</returns>
            <remarks>
            The method returns <see cref="F:System.Int32.MaxValue"/> if an
            incorrect input is submitted
            </remarks>
        </member>
        <member name="M:Extensions.ConsoleExtension.AcquireUserInputAsUInt(System.Int32)">
            <summary>
            Acquire the user input from the <see cref="T:System.Console"/>
            as <see cref="T:System.UInt32"/>
            </summary>
            <param name="numberBase">The number base</param>
            <returns>The user input</returns>
            <remarks>
            The method returns <see cref="F:System.UInt32.MaxValue"/> if an
            incorrect input is submitted
            </remarks>
        </member>
        <member name="M:Extensions.ConsoleExtension.AcquireUserInputAsDouble">
            <summary>
            Acquire the user input from the <see cref="T:System.Console"/>
            as <see cref="T:System.Double"/>
            </summary>
            <returns>The user input</returns>
            <remarks>
            The method returns <see cref="F:System.Double.MaxValue"/> if an
            incorrect input is submitted
            </remarks>
        </member>
        <member name="M:Extensions.ConsoleExtension.SetConsoleSize(System.Int32,System.Int32)">
            <summary>
            Set the <see cref="T:System.Console"/> size
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:Extensions.ConsoleExtension.SetConsolePosition(System.Int32,System.Int32)">
            <summary>
            Set the <see cref="T:System.Console"/> position
            </summary>
            <param name="left">The distance from the left corner</param>
            <param name="top">The distance from the top corner</param>
        </member>
        <member name="T:Extensions.ExtensionMethods">
            <summary>
            Class that provides useful extension methods, not related to a particular field
            </summary>
        </member>
        <member name="M:Extensions.ExtensionMethods.ParallelForeachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Perform an async for each, in parallel
            </summary>
            <param name="source">The source collection</param>
            <param name="function">The <see cref="T:System.Func`2"/> to execute</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Extensions.ExtensionMethods.IsIn``1(``0,``0[])">
            <summary>
            Determine whether an item is contained in a collection of elements
            </summary>
            <typeparam name="T">The type of the item and the collection</typeparam>
            <param name="item">The item to check</param>
            <param name="collection">The collection</param>
            <returns><see langword="true"/> if the item is contained in the collection,
            <see langword="false"/> otherwise</returns>
            <example>
            <code>
            int item = 10;
            if(item.IsIn(0, 5, 2, 4, -6, 10))
            {
                // Some stuff
            }
            else
            {
                // Some other stuff
            }
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.With(System.String,System.Object[])">
            <summary>
            Format a <see cref="T:System.String"/>. <br/>
            A syntactic sugar of <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
            <param name="s">The <see cref="T:System.String"/> to format</param>
            <param name="args">The arguments</param>
            <returns>The formatted <see cref="T:System.String"/></returns>
            <example>
            <code>
            string text = "First: {0}. Second: {1}. Third: {2}".With("1", "2", "3");
            // text == "First 1. Second: 2. Third: 3"
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.IsBetweenInclusive``1(``0,``0,``0)">
            <summary>
            Determine whether a value is in the given range
            (inclusive)
            </summary>
            <typeparam name="T">The type of both the value and the limits</typeparam>
            <param name="actual">The value to check</param>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
            <returns><see langword="true"/> if <paramref name="actual"/> is greater or equal to
            <paramref name="lower"/> and lesser or equal to <paramref name="upper"/>,
            <see langword="false"/> otherwise</returns>
            <example>
            <code>
            int item = 10;
            if(item.IsBetweenInclusive(0, 100)) // True
            {
                // Some stuff
            }
            else
            {
                // Some other stuff
            }
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.IsBetweenExclusive``1(``0,``0,``0)">
            <summary>
            Determine whether a value is in the given range
            (exclusive)
            </summary>
            <typeparam name="T">The type of the value and the limits</typeparam>
            <param name="actual">The value to check</param>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
            <returns><see langword="true"/> if <paramref name="actual"/> is greater than
            <paramref name="lower"/> and lesser than <paramref name="upper"/>,
            <see langword="true"/> otherwise</returns>
            <example>
            <code>
            int item = 10;
            if(item.IsBetweenExclusive(0, 100)) // True
            {
                // Some stuff
            }
            else
            {
                // Some other stuff
            }
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfTrue``1(System.Boolean,System.Func{``0})">
            <summary>
            Perform a <see cref="T:System.Func`2"/> if <paramref name="value"/> is <see langword="true"/>
            </summary>
            <typeparam name="T">The type of the value to test</typeparam>
            <param name="value">The value</param>
            <param name="function">The <see cref="T:System.Func`2"/></param>
            <returns>The result of the <see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfTrue(System.Boolean,System.Action)">
            <summary>
            Perform an <see cref="T:System.Action"/> if <paramref name="value"/> is <see langword="true"/>
            </summary>
            <param name="value">The value</param>
            <param name="action">The <see cref="T:System.Action"/></param>
            <returns>The result of the <see cref="T:System.Action"/></returns>
            <example>
            <code>
            bool flag = true;
            int x = 0;
            flag.DoIfTrue(() => x += 1);
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfFalse``1(System.Boolean,System.Func{``0})">
            <summary>
            Perform a <see cref="T:System.Func`2"/> if <paramref name="value"/> is <see langword="false"/>
            </summary>
            <typeparam name="T">The type of the value to test</typeparam>
            <param name="value">The value</param>
            <param name="function">The <see cref="T:System.Func`2"/></param>
            <returns>The result of the <see cref="T:System.Func`2"/></returns>
            <example>
            <code>
            bool flag = true;
            int x = 0;
            flag.DoIfFalse(() => x += 1);
            </code>
            </example>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfFalse(System.Boolean,System.Action)">
            <summary>
            Perform an <see cref="T:System.Action"/> if <paramref name="value"/> is <see langword="false"/>
            </summary>
            <param name="value">The value</param>
            <param name="action">The <see cref="T:System.Action"/></param>
            <returns>The result of the <see cref="T:System.Action"/></returns>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfTrueIfFalse``1(System.Boolean,System.Func{``0},System.Func{``0})">
            <summary>
            Perform a <see cref="T:System.Func`2"/> based on <paramref name="value"/>
            </summary>
            <typeparam name="T">The type of the value to test</typeparam>
            <param name="value">The value</param>
            <param name="trueFunction">The <see cref="T:System.Func`2"/> to execute
            if <paramref name="value"/> is <see langword="true"/></param>
            <param name="falseFunction">The <see cref="T:System.Func`2"/> to execute
            if <paramref name="value"/> is <see langword="false"/></param>
            <returns>The result of the <see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:Extensions.ExtensionMethods.DoIfTrueIfFalse(System.Boolean,System.Action,System.Action)">
            <summary>
            Perform an <see cref="T:System.Action"/> based on <paramref name="value"/>
            </summary>
            <param name="value">The value</param>
            <param name="trueAction">The <see cref="T:System.Action"/> to execute
            if <paramref name="value"/> is <see langword="true"/></param>
            <param name="falseAction">The <see cref="T:System.Action"/> to execute
            if <paramref name="value"/> is <see langword="false"/></param>
            <returns>The result of the <see cref="T:System.Action"/></returns>
        </member>
        <member name="T:Extensions.FrameworkExtension">
            <summary>
            Provides framework-related extension methods
            </summary>
        </member>
        <member name="M:Extensions.FrameworkExtension.WrapToParameter(System.Double)">
            <summary>
            Wrap a <see cref="T:System.Double"/> to a <see cref="T:Core.Parameters.NumericParameter"/>
            </summary>
            <param name="source">The source</param>
            <returns>The <see cref="T:Core.Parameters.NumericParameter"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WrapToParameter(System.Boolean)">
            <summary>
            Wrap a <see cref="T:System.Boolean"/> to a <see cref="T:Core.Parameters.BoolParameter"/>
            </summary>
            <param name="source">The source</param>
            <returns>The <see cref="T:Core.Parameters.BoolParameter"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WrapToParameter(System.String)">
            <summary>
            Wrap a <see cref="T:System.String"/> to a <see cref="T:Core.Parameters.StringParameter"/>
            </summary>
            <param name="source">The source</param>
            <returns>The <see cref="T:Core.Parameters.StringParameter"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WrapToParameter(System.TimeSpan)">
            <summary>
            Wrap a <see cref="T:System.TimeSpan"/> to a <see cref="T:Core.Parameters.TimeSpanParameter"/>
            </summary>
            <param name="source">The source</param>
            <returns>The <see cref="T:Core.Parameters.TimeSpanParameter"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,Core.Conditions.ICondition)">
            <summary>
            Wait for an <see cref="T:Core.Conditions.ICondition"/> to be <see langword="true"/> without timeout
            </summary>
            <param name="_">The source</param>
            <param name="condition">The <see cref="T:Core.Conditions.ICondition"/> to wait</param>
            <returns>The (async) <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,Core.Conditions.ICondition,System.Int32)">
            <summary>
            Wait for an <see cref="T:Core.Conditions.ICondition"/> to be <see langword="true"/> with a timeout
            </summary>
            <param name="_">The source</param>
            <param name="condition">The <see cref="T:Core.Conditions.ICondition"/> to wait</param>
            <param name="timeout">The timeout (in milliseconds)</param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> (in which the result will be <see langword="true"/> if
            the <paramref name="condition"/> became <see langword="true"/> before <paramref name="timeout"/> occurred,
            <see langword="false"/> otherwise)
            </returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,System.TimeSpan)">
            <summary>
            Wait for a specific amount of time
            </summary>
            <param name="_">The source</param>
            <param name="timeToWait">The time to wait (as <see cref="T:System.TimeSpan"/>)</param>
            <returns>The (async) <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,System.Threading.Tasks.Task)">
            <summary>
            Wait for a <see cref="T:System.Threading.Tasks.Task"/> to complete without a timeout
            </summary>
            <param name="_">The source</param>
            <param name="t">The <see cref="T:System.Threading.Tasks.Task"/> to wait</param>
            <returns>The (async) <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Wait for a <see cref="T:System.Threading.Tasks.Task"/> to complete with timeout
            </summary>
            <param name="_">The source</param>
            <param name="t">The <see cref="T:System.Threading.Tasks.Task"/> to wait</param>
            <param name="timeout">The timeout (in milliseconds)</param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> (<see langword="true"/> if the <see cref="T:System.Threading.Tasks.Task"/> completed,
            <see langword="false"/> if timeout occurred)
            </returns>
        </member>
        <member name="M:Extensions.FrameworkExtension.WaitFor(System.Object,System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Wait for a <see cref="T:System.Threading.Tasks.Task"/> to complete with timeout
            </summary>
            <param name="_">The source</param>
            <param name="t">The <see cref="T:System.Threading.Tasks.Task"/> to wait</param>
            <param name="timeout">The timeout (as <see cref="T:System.TimeSpan"/>)</param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> (<see langword="true"/> if the <see cref="T:System.Threading.Tasks.Task"/> completed,
            <see langword="false"/> if timeout occurred)
            </returns>
        </member>
        <member name="T:Extensions.LoopExtensions">
            <summary>
            Provide logic structure-related extension methods
            </summary>
        </member>
        <member name="M:Extensions.LoopExtensions.TimedWhile(System.Action,System.Func{System.Boolean},System.Int32)">
            <summary>
            Provide a timed <see langword="while"/> loop
            </summary>
            <param name="source">The <see cref="T:System.Action"/> to perform on each step</param>
            <param name="condition">The <see cref="T:System.Func`2"/> that represent the loop condition</param>
            <param name="interval">The timed loop interval (in milliseconds)</param>
        </member>
        <member name="T:Extensions.SystemExtension">
            <summary>
            Provides a method for performing a deep copy of an object. <br/>
            Reflection is used to perform the deep copy
            </summary>
            <remarks>
            Reflection is used instead of a binary deep copy
            for security reasons. <br/>
            In fact, the MSDN binary formatter will gradually be
            removed in following .NET releases
            </remarks>
        </member>
        <member name="M:Extensions.SystemExtension.DeepCopy``1(``0)">
            <summary>
            Perform a deep copy of the object via serialization
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The deep copy of the object.</returns>
        </member>
        <member name="M:Extensions.SystemExtension.Serialize(System.Object,System.String)">
            <summary>
            Serialize an <see cref="T:System.Object"/> to a json file
            </summary>
            <param name="source">The object to serialize</param>
            <param name="path">The json file path</param>
            <returns>The (sync) <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Extensions.TaskExtensions">
            <summary>
            Provide <see cref="T:System.Threading.Tasks.Task"/> (and <see cref="T:System.Threading.Tasks.Task`1"/>)-related extension methods
            </summary>
        </member>
        <member name="M:Extensions.TaskExtensions.StartWithTimeout(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Start a <see cref="T:System.Threading.Tasks.Task"/> with a <paramref name="timeout"/>
            </summary>
            <param name="source">The <see cref="T:System.Threading.Tasks.Task"/> to start</param>
            <param name="timeout">The <paramref name="source"/> timeout (in milliseconds) to complete</param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> (<see langword="true"/> if the <see cref="T:System.Threading.Tasks.Task"/> completed,
            <see langword="false"/> if timeout occurred)
            </returns>
        </member>
        <member name="M:Extensions.TaskExtensions.StartWithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Start a <see cref="T:System.Threading.Tasks.Task"/> with a <paramref name="timeout"/>
            </summary>
            <param name="source">The <see cref="T:System.Threading.Tasks.Task"/> to start</param>
            <param name="timeout">The <paramref name="source"/> timeout (as <see cref="T:System.TimeSpan"/>) to complete</param>
            <returns>
            The (async) <see cref="T:System.Threading.Tasks.Task`1"/> (<see langword="true"/> if the <see cref="T:System.Threading.Tasks.Task"/> completed,
            <see langword="false"/> if timeout occurred)
            </returns>
        </member>
        <member name="M:Extensions.UserInterfaceExtensions.InvokeIfNeeded(System.Windows.Forms.Control,System.Windows.Forms.Form,System.Action,System.Delegate,System.Object[])">
            <summary>
            Automatically update a <see cref="T:System.Windows.Forms.Control"/> if needed (e.g. in case of a cross-thread operation)
            </summary>
            <param name="source">The source <see cref="T:System.Windows.Forms.Control"/></param>
            <param name="form">The parent <see cref="T:System.Windows.Forms.Form"/></param>
            <param name="updateAction">The <see cref="T:System.Action"/> to call in case of a non cross-thread operation</param>
            <param name="crossThreadMethod">The cross-thread <see cref="T:System.Delegate"/> method (e.g. a value changed handler)</param>
            <param name="args">The <paramref name="crossThreadMethod"/> arguments</param>
        </member>
    </members>
</doc>
