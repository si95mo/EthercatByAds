<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IO</name>
    </assembly>
    <members>
        <member name="T:IO.FileHandler">
            <summary>
            Define the write mode (overwrite or append).
            </summary>
        </member>
        <member name="T:IO.FileHandler.SaveMode">
            <summary>
            Define the save mode
            </summary>
        </member>
        <member name="F:IO.FileHandler.SaveMode.Overwrite">
            <summary>
            Specify the overwrite mode for writing
            </summary>
        </member>
        <member name="F:IO.FileHandler.SaveMode.Append">
            <summary>
            Specify the append mode for writing
            </summary>
        </member>
        <member name="F:IO.FileHandler.sw">
            <summary>
            The <see cref="T:System.IO.StreamWriter"/>
            </summary>
        </member>
        <member name="F:IO.FileHandler.sr">
            <summary>
            The <see cref="T:System.IO.StreamReader"/>
            </summary>
        </member>
        <member name="M:IO.FileHandler.Save(System.String,System.String,IO.FileHandler.SaveMode)">
            <summary>
            Save text to a file.
            </summary>
            <param name="text">The text to save</param>
            <param name="path">Path to the file</param>
            <param name="mode">Write mode, overwrite or append <see cref="T:IO.FileHandler.SaveMode"/></param>
        </member>
        <member name="M:IO.FileHandler.SaveAsync(System.String,System.String,IO.FileHandler.SaveMode)">
            <summary>
            Save text to a file asynchronously
            </summary>
            <param name="text">The text to save</param>
            <param name="path">Path to the file</param>
            <param name="mode">Write mode, overwrite or append <see cref="T:IO.FileHandler.SaveMode"/></param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:IO.FileHandler.Read(System.String)">
            <summary>
            Read text from a file.
            </summary>
            <param name="path">The file path</param>
            <returns>The text read</returns>
        </member>
        <member name="M:IO.FileHandler.ReadAsync(System.String)">
            <summary>
            Read text from a file asynchronously
            </summary>
            <param name="path">The file path</param>
            <returns>The (async) <see cref="T:System.Threading.Tasks.Task"/> of which the result is the text read</returns>
        </member>
        <member name="M:IO.FileHandler.CopyFile(System.String,System.String)">
            <summary>
            Copy a file.
            </summary>
            <param name="file">The path of the file to be copied</param>
            <param name="newFile">The path in where copy the file</param>
        </member>
        <member name="M:IO.FileHandler.CopyAllFilesInDirectory(System.String,System.String)">
            <summary>
            Copy all files in a directory, overwriting existing modified files.
            </summary>
            <param name="directoryPath">The directory path</param>
            <param name="newDirectoryPath">The new directory path</param>
        </member>
        <member name="M:IO.FileHandler.CopyAllFilesInDirectory(System.String,System.String,System.String[])">
            <summary>
            Copy all files in a directory with specified extensions,
            overwriting existing modified files.
            </summary>
            <param name="directoryPath">The directory path</param>
            <param name="newDirectoryPath">The new directory path</param>
            <param name="extensions">An array of string containing the extensions
            of the file to be copied (e.g. ".pdf")</param>
        </member>
        <member name="M:IO.FileHandler.CopyFileAsync(System.String,System.String)">
            <summary>
            Copy a file asynchronously
            </summary>
            <param name="sourcePath">The source file path</param>
            <param name="destinationPath">The destination file path</param>
            <returns>The (async) <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:IO.FileHandler.IsFileModified(System.String,System.String)">
            <summary>
            Check if a file has been modified (i.e. last time it was written).
            </summary>
            <param name="existingFile">The old file path present in disk</param>
            <param name="fileToPaste">The new file path to check if modified</param>
            <returns><see langword="true"/> if <paramref name="fileToPaste"/> has been modified
            and its different from <paramref name="existingFile"/>,
            <see langword="false"/> otherwise</returns>
        </member>
        <member name="T:IO.FileItem">
            <summary>
            Represent a file with a <see cref="P:IO.FileItem.Key"/> and a <see cref="P:IO.FileItem.Value"/>
            (where Key = file name and Value = file icon).
            </summary>
        </member>
        <member name="P:IO.FileItem.Key">
            <summary>
            Key feature, file name
            </summary>
        </member>
        <member name="P:IO.FileItem.Value">
            <summary>
            Value feature, file icon
            </summary>
        </member>
        <member name="T:IO.IoUtility">
            <summary>
            Static class that adds extra functions to IO operation.
            <see cref="T:IO.FileHandler"/>
            </summary>
        </member>
        <member name="M:IO.IoUtility.GetDesktopFolder">
            <summary>
            Get to desktop folder.
            </summary>
            <returns> Path to the desktop folder </returns>
        </member>
        <member name="M:IO.IoUtility.DoesDirectoryExists(System.String)">
            <summary>
            Check if a directory exists.
            </summary>
            <param name="path"> The path to the folder to check </param>
            <returns> <see langword="true"/> if the directory exists, <see langword="false"/> otherwise </returns>
        </member>
        <member name="M:IO.IoUtility.DoesFileExist(System.String)">
            <summary>
            Check if a file exists.
            </summary>
            <param name="path"> The path to the file to check </param>
            <returns> <see langword="true"/>  if the file exists, <b>false</b> otherwise </returns>
        </member>
        <member name="M:IO.IoUtility.CreateDirectoryIfNotExists(System.String)">
            <summary>
            Create a directory if not exists at the path specified.
            </summary>
            <param name="path"> The path where to create the new folder </param>
            <returns> <see langword="true"/> if the directory has been created, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IO.IoUtility.GetFileIcon(System.String)">
            <summary>
            Extract the icon from all files contained in the folder specified
            </summary>
            <param name="path"> The folder path </param>
            <returns> A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:IO.FileItem"/> containing the name and the icon of each file </returns>
        </member>
        <member name="M:IO.IoUtility.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Check if a file is locked (i.e. used by another process)
            </summary>
            <param name="file">The <see cref="T:System.IO.FileInfo"/></param>
            <returns><see langword="true"/> if the <paramref name="file"/> is not locked, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:IO.IoUtility.IsFileLocked(System.String)">
            <summary>
            Check if a file is locked (i.e. used by another process)
            </summary>
            <param name="file">The file path</param>
            <returns><see langword="true"/> if the <paramref name="file"/> is not locked, <see langword="false"/> otherwise</returns>
        </member>
    </members>
</doc>
