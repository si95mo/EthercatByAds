<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core.Scheduling</name>
    </assembly>
    <members>
        <member name="T:Core.Scheduling.AsyncScheduler">
            <summary>
            Implement an async <see cref="T:Core.DataStructures.Method"/> scheduler
            </summary>
        </member>
        <member name="M:Core.Scheduling.AsyncScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Core.Scheduling.AsyncScheduler"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.AsyncScheduler.Execute">
            <summary>
            Executes the <see cref="T:System.Action"/> associated with the <see cref="T:Core.DataStructures.Method"/>
            stored in the subscribed ones
            and remove it from the <see cref="T:Core.Scheduling.ActionQueue`1"/>
            </summary>
            <returns>The <see cref="T:Core.DataStructures.Method"/> executed</returns>
        </member>
        <member name="T:Core.Scheduling.InstructionScheduler">
            <summary>
            Implement an <see cref="T:Instructions.Instruction"/> scheduler
            </summary>
        </member>
        <member name="P:Core.Scheduling.InstructionScheduler.Instructions">
            <summary>
            The subscribed <see cref="T:Instructions.Instruction"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.InstructionScheduler.#ctor">
            <summary>
            Create a new instance of <see cref="T:Core.Scheduling.InstructionScheduler"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.InstructionScheduler.Add(Instructions.IInstruction)">
            <summary>
            Add an <see cref="T:Instructions.Instruction"/> to the
            <see cref="P:Core.Scheduling.InstructionScheduler.Instructions"/>
            </summary>
            <param name="instruction">The <see cref="T:Instructions.Instruction"/> to add</param>
        </member>
        <member name="M:Core.Scheduling.InstructionScheduler.Execute">
            <summary>
            Execute all the subscribed <see cref="T:Instructions.Instruction"/>
            and remove them from <see cref="P:Core.Scheduling.InstructionScheduler.Instructions"/>
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> with the executed <see cref="T:Instructions.Instruction"/></returns>
        </member>
        <member name="M:Core.Scheduling.InstructionScheduler.StopAll">
            <summary>
            Stop (pause) the current execution
            </summary>
        </member>
        <member name="T:Core.Scheduling.ActionQueue`1">
            <summary>
            An <see cref="T:Core.Scheduling.ActionQueue`1"/> with <see cref="E:Core.Scheduling.ActionQueue`1.Enqueued"/> and
            <see cref="E:Core.Scheduling.ActionQueue`1.Dequeued"/> event handlers.
            See <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.Queue`1"/> items</typeparam>
        </member>
        <member name="E:Core.Scheduling.ActionQueue`1.Enqueued">
            <summary>
            The <see cref="M:Core.Scheduling.ActionQueue`1.Enqueue(`0)"/> <see cref="T:System.EventHandler"/>
            </summary>
        </member>
        <member name="E:Core.Scheduling.ActionQueue`1.Dequeued">
            <summary>
            The <see cref="M:Core.Scheduling.ActionQueue`1.Dequeue"/> <see cref="T:System.EventHandler"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.ActionQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an element to the collection and
            handle the Enqueued <see cref="T:System.EventHandler"/>.
            Also see <see cref="M:System.Collections.Generic.Queue`1.Enqueue(`0)"/>
            </summary>
            <param name="item">The item to enqueue</param>
        </member>
        <member name="M:Core.Scheduling.ActionQueue`1.Dequeue">
            <summary>
            Dequeue an element from the collection and
            handle the Dequeued <see cref="T:System.EventHandler"/>.
            Also see <see cref="M:System.Collections.Generic.Queue`1.Dequeue"/>
            </summary>
            <returns>The item dequeued</returns>
        </member>
        <member name="T:Core.Scheduling.IScheduler`1">
            <summary>
            Describe a generic scheduler prototype
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Core.Scheduling.IScheduler`1.Instructions">
            <summary>
            The subscribers
            </summary>
        </member>
        <member name="M:Core.Scheduling.IScheduler`1.Add(`0)">
            <summary>
            Add an element to the scheduler
            </summary>
            <param name="method">The element to add</param>
        </member>
        <member name="M:Core.Scheduling.IScheduler`1.RemoveAll">
            <summary>
            Remove all elements from the <see cref="T:Core.Scheduling.IScheduler`1"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.IScheduler`1.Execute">
            <summary>
            Execute the item stored
            </summary>
            <returns>The item executed</returns>
        </member>
        <member name="M:Core.Scheduling.IScheduler`1.SaveExecutionList(System.String)">
            <summary>
            Save the execution list
            </summary>
            <param name="fileName">The file path</param>
        </member>
        <member name="M:Core.Scheduling.IScheduler`1.LoadExecutionList(System.String)">
            <summary>
            Load the execution list
            </summary>
            <param name="fileName">The file path</param>
        </member>
        <member name="T:Core.Scheduling.MethodScheduler">
            <summary>
            Implement a <see cref="T:Core.DataStructures.Method"/> scheduler
            </summary>
        </member>
        <member name="F:Core.Scheduling.MethodScheduler.subscribedMethods">
            <summary>
            The subscribed methods
            </summary>
        </member>
        <member name="F:Core.Scheduling.MethodScheduler.persistentSubscribers">
            <summary>
            The persistent subscribed methods
            </summary>
        </member>
        <member name="P:Core.Scheduling.MethodScheduler.Instructions">
            <summary>
            The <see cref="T:Core.Scheduling.ActionQueue`1"/> of all the
            <see cref="T:Core.DataStructures.Method"/> subscribed to the <see cref="T:Core.Scheduling.MethodScheduler"/>
            </summary>
        </member>
        <member name="P:Core.Scheduling.MethodScheduler.PersistentSubscribers">
            <summary>
            The persistent subscribers
            </summary>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.#ctor">
            <summary>
            Initialize the parameters
            </summary>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.Add(Core.DataStructures.Method)">
            <summary>
            Add an element to the subscribed methods.
            </summary>
            <param name="method">The <see cref="T:System.Object"/> (value) to add</param>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.LoadExecutionList(System.String)">
            <summary>
            Load a <see cref="T:Core.Scheduling.ActionQueue`1"/> with
            a previous iteration performed by the
            <see cref="T:Core.Scheduling.SimpleMethodScheduler"/>.
            </summary>
            <param name="fileName">The file name from which read the list</param>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.RemoveAll">
            <summary>
            Removes all the <see cref="T:Core.DataStructures.Method"/> subscribed in
            the <see cref="P:Core.Scheduling.MethodScheduler.Instructions"/>.
            </summary>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.SaveExecutionList(System.String)">
            <summary>
            Save the last execution list of <see cref="T:Core.DataStructures.Method"/>
            performed by the <see cref="T:Core.Scheduling.MethodScheduler"/>.
            </summary>
            <param name="fileName">The file name in which save the list</param>
        </member>
        <member name="M:Core.Scheduling.MethodScheduler.Execute">
            <summary>
            Execute a <see cref="T:Core.DataStructures.Method"/>
            </summary>
            <returns>The executed <see cref="T:Core.DataStructures.Method"/></returns>
        </member>
        <member name="T:Core.Scheduling.SimpleInstructionScheduler">
            <summary>
            Implement a simple <see cref="T:Instructions.Instruction"/> scheduler
            </summary>
        </member>
        <member name="M:Core.Scheduling.SimpleInstructionScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Core.Scheduling.SimpleMethodScheduler"/>
            </summary>
        </member>
        <member name="T:Core.Scheduling.SimpleMethodScheduler">
            <summary>
            Class that implement a simple scheduler that executes the methods
            of the subscribed <see cref="T:System.Object"/>.
             <b>Note</b> that each class that will have methods subscribed to the <see cref="T:Core.Scheduling.SimpleMethodScheduler"/>
            <b>must</b> be serializable in order to perform a deep copy of the objects and
            have the <see cref="T:Core.Scheduling.SimpleMethodScheduler"/> work!
            See <see cref="M:Extensions.SystemExtension.DeepCopy``1(``0)"/>, <see cref="T:System.SerializableAttribute"/> and
            also <see cref="M:System.SerializableAttribute.#ctor"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.SimpleMethodScheduler.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Core.Scheduling.SimpleMethodScheduler"/>
            </summary>
        </member>
        <member name="M:Core.Scheduling.SimpleMethodScheduler.Execute">
            <summary>
            Executes the <see cref="T:System.Action"/> associated with the <see cref="T:Core.DataStructures.Method"/>
            stored in the subscribed ones,
            and remove it from the <see cref="T:Core.Scheduling.ActionQueue`1"/>
            </summary>
            <returns>The <see cref="T:Core.DataStructures.Method"/> executed</returns>
        </member>
    </members>
</doc>
