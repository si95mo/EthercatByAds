<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Diagnostic</name>
    </assembly>
    <members>
        <member name="T:Diagnostic.Debugger">
            <summary>
            Implement a debugger that print to the <see cref="T:System.Diagnostics.Debug"/> console. <br/>
            This class should be intended as a momentary logger to use during debug that prevents several
            writing operation to file, but should be then disabled (by setting <see cref="P:Diagnostic.Debugger.Enabled"/> <see langword="false"/>)
            or completely removed from code
            </summary>
        </member>
        <member name="P:Diagnostic.Debugger.Enabled">
            <summary>
            The enable option of the <see cref="T:Diagnostic.Debugger"/>
            </summary>
        </member>
        <member name="M:Diagnostic.Debugger.WriteLine(System.String)">
            <summary>
            Write a new line in the debug console and append
            an <see cref="P:System.Environment.NewLine"/> at the end of it if
            <see cref="P:Diagnostic.Debugger.Enabled"/> is <see langword="true"/>
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Diagnostic.Debugger.WriteLine(System.Diagnostics.StackTrace)">
            <summary>
            Write a <see cref="T:System.Diagnostics.StackTrace"/> to the debug console and append
            an <see cref="P:System.Environment.NewLine"/> at the end of it if
            <see cref="P:Diagnostic.Debugger.Enabled"/> is <see langword="true"/>
            </summary>
            <param name="stackTrace">The <see cref="T:System.Diagnostics.StackTrace"/> to write</param>
        </member>
        <member name="M:Diagnostic.Debugger.WriteLine(System.Exception,System.Boolean)">
            <summary>
            Write the <see cref="P:System.Exception.Message"/> and eventually the <see cref="P:System.Exception.StackTrace"/> to the debug console and
            append an <see cref="P:System.Environment.NewLine"/> at the end of it if
            <see cref="P:Diagnostic.Debugger.Enabled"/> is <see langword="true"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to write</param>
            <param name="printStackTrace"><see langword="true"/> if <see cref="P:System.Exception.StackTrace"/> must be printed, <see langword="false"/> otherwise</param>
        </member>
        <member name="M:Diagnostic.Debugger.FlattenException(System.Exception)">
            <summary>
            Flatten an <see cref="T:System.Exception"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to flatten</param>
            <returns>The flattened <see cref="T:System.Exception"/></returns>
        </member>
        <member name="T:Diagnostic.Severity">
            <summary>
            Represent the severity of the entry to log
            </summary>
        </member>
        <member name="F:Diagnostic.Severity.Trace">
            <summary>
            A trace type entry. <br/>
            Lowest level of <see cref="T:Diagnostic.Severity"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Severity.Debug">
            <summary>
            A debug type entry. <br/>
            Higher level of <see cref="T:Diagnostic.Severity"/> than <see cref="F:Diagnostic.Severity.Trace"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Severity.Info">
            <summary>
            An info type entry. <br/>
            Higher level of <see cref="T:Diagnostic.Severity"/> than <see cref="F:Diagnostic.Severity.Debug"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Severity.Warn">
            <summary>
            A warn type entry. <br/>
            Higher level of <see cref="T:Diagnostic.Severity"/> than <see cref="F:Diagnostic.Severity.Info"/>
            </summary>
            <remarks>
            This level of <see cref="T:Diagnostic.Severity"/> cannot be disabled. See <see cref="M:Diagnostic.Logger.SetMinimumSeverityLevel(Diagnostic.Severity)"/>
            </remarks>
        </member>
        <member name="F:Diagnostic.Severity.Error">
            <summary>
            An error type entry. <br/>
            Higher level of <see cref="T:Diagnostic.Severity"/> than <see cref="F:Diagnostic.Severity.Warn"/>
            </summary>
            <remarks>
            This level of <see cref="T:Diagnostic.Severity"/> cannot be disabled. See <see cref="M:Diagnostic.Logger.SetMinimumSeverityLevel(Diagnostic.Severity)"/>
            </remarks>
        </member>
        <member name="F:Diagnostic.Severity.Fatal">
            <summary>
            A fatal type entry. <br/>
            Highest level of <see cref="T:Diagnostic.Severity"/>
            </summary>
            <remarks>
            This level of <see cref="T:Diagnostic.Severity"/> cannot be disabled. See <see cref="M:Diagnostic.Logger.SetMinimumSeverityLevel(Diagnostic.Severity)"/>
            </remarks>
        </member>
        <member name="T:Diagnostic.Logger">
            <summary>
            Class that implements logging functionalities.
            </summary>
        </member>
        <member name="T:Diagnostic.Logger.ExceptionEntry">
            <summary>
            Represent an <see cref="T:System.Exception"/> entry to be logged
            </summary>
        </member>
        <member name="F:Diagnostic.Logger.ExceptionEntry.Timestamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="F:Diagnostic.Logger.ExceptionEntry.Severity">
            <summary>
            The <see cref="T:Diagnostic.Severity"/> as <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Logger.ExceptionEntry.Source">
            <summary>
            The <see cref="P:System.Exception.Source"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Logger.ExceptionEntry.Message">
            <summary>
            The <see cref="P:System.Exception.Message"/>
            </summary>
        </member>
        <member name="F:Diagnostic.Logger.ExceptionEntry.StackTrace">
            <summary>
            The <see cref="P:System.Exception.StackTrace"/> as <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:Diagnostic.Logger.MinimumSeverityLevel">
            <summary>
            The minimum <see cref="T:Diagnostic.Severity"/> level of the entry to log
            </summary>
            <remarks>
            Please note that the default minimum level
            is <see cref="F:Diagnostic.Severity.Debug"/>
            </remarks>
        </member>
        <member name="P:Diagnostic.Logger.Path">
            <summary>
            The log file path
            </summary>
        </member>
        <member name="P:Diagnostic.Logger.Initialized">
            <summary>
            Define whether the <see cref="T:Diagnostic.Logger"/> has been initialized by calling <see cref="M:Diagnostic.Logger.Initialize(System.String,System.Int32)"/> -
            <see langword="true"/> - or not - <see langword="false"/>
            </summary>
        </member>
        <member name="M:Diagnostic.Logger.Initialize(System.String,System.Int32)">
            <summary>
            Initialize the logger with the specified parameters
            </summary>
            <remarks>
            If the <paramref name="daysOfLogsToKeepSaved"/> is equal to -1 no log file will be deleted (i.e. all the logs will be kept saved in the disk),
            otherwise logs older than the actual day minus the time span specified will be deleted (e.g. if today is 10/01/2021 and
            <paramref name="daysOfLogsToKeepSaved"/> is 10, then all the logs up to 30/12/2020 will be deleted)
            </remarks>
            <param name="logPath">The path of the log file</param>
            <param name="daysOfLogsToKeepSaved">The number of days of logs to keep saved up to now; -1 equals no file deleted</param>
        </member>
        <member name="M:Diagnostic.Logger.SetMinimumSeverityLevel(Diagnostic.Severity)">
            <summary>
            Set the <see cref="P:Diagnostic.Logger.MinimumSeverityLevel"/> <see cref="T:Diagnostic.Severity"/> to log (i.e. all the entry with a lower severity will not be logged)
            </summary>
            <remarks>
            Note that the minimum level of the logged entry can't be higher than <see cref="F:Diagnostic.Severity.Info"/> (i.e. entry of level
            <see cref="F:Diagnostic.Severity.Warn"/>, <see cref="F:Diagnostic.Severity.Error"/> and <see cref="F:Diagnostic.Severity.Fatal"/> will always be logged). <br/>
            The <see cref="T:Diagnostic.Severity"/> level is defined as follows (from lower to higher): <see cref="F:Diagnostic.Severity.Trace"/>,
            <see cref="F:Diagnostic.Severity.Debug"/>, <see cref="F:Diagnostic.Severity.Info"/>, <see cref="F:Diagnostic.Severity.Warn"/>, <see cref="F:Diagnostic.Severity.Error"/> and <see cref="F:Diagnostic.Severity.Fatal"/>
            </remarks>
            <param name="level">The <see cref="T:Diagnostic.Severity"/> level</param>
        </member>
        <member name="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)">
            <summary>
            Simple log method.
            Save the text specified as parameter in the log file.
            <see cref="P:Diagnostic.Logger.Path"/>
            </summary>
            <param name="text">The text to be saved</param>
            <param name="severity">The <see cref="T:Diagnostic.Severity"/></param>
        </member>
        <member name="M:Diagnostic.Logger.Log(System.Exception)">
            <summary>
            Append to the log file a description of the <see cref="T:System.Exception"/> occurred
            </summary>
            <param name="ex">The exception to log</param>
            <remarks>
            The entry will be saved <b>only</b> if it differs from
            the last one saved in the log file (i.e. different type <b>and</b>
            different message <b>and</b> different stack trace)!
            </remarks>
        </member>
        <member name="M:Diagnostic.Logger.Trace(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Trace"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.Debug(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Debug"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.Info(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Info"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.Warn(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Warn"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.Error(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Error"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <remarks>If the log is required after an <see cref="T:System.Exception"/>
            occurred, consider using the method <see cref="M:Diagnostic.Logger.Log(System.Exception)"/> instead!</remarks>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.Error(System.Exception)">
            <summary>
            Save the <see cref="T:System.Exception"/> to the log file.
            See also <see cref="M:Diagnostic.Logger.Log(System.Exception)"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> occurred</param>
        </member>
        <member name="M:Diagnostic.Logger.Fatal(System.String)">
            <summary>
            Save the text specified as <see cref="F:Diagnostic.Severity.Fatal"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.Log(System.String,Diagnostic.Severity)"/>
            </summary>
            <remarks>If the log is required after an <see cref="T:System.Exception"/>
            occurred, consider using the method <see cref="M:Diagnostic.Logger.Log(System.Exception)"/> instead!</remarks>
            <param name="text">The text to log</param>
        </member>
        <member name="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)">
            <summary>
            Simple asynchronous log method.
            Save the text specified as parameter in the log file.
            <see cref="P:Diagnostic.Logger.Path"/>
            </summary>
            <param name="text">The text to be saved</param>
            <param name="severity">The <see cref="T:Diagnostic.Severity"/></param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.LogAsync(System.Exception)">
            <summary>
            Append asynchronously to the log file a description of the <see cref="T:System.Exception"/> occurred
            </summary>
            <param name="ex">The exception to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
            <remarks>
            The entry will be saved <b>only</b> if it differs from
            the last one saved in the log file (i.e. different type <b>and</b>
            different message <b>and</b> different stack trace)!
            </remarks>
        </member>
        <member name="M:Diagnostic.Logger.TraceAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Trace"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.DebugAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Debug"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.InfoAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Info"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.WarnAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Warn"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.ErrorAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Error"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.ErrorAsync(System.Exception)">
            <summary>
            Save asynchronously the <see cref="T:System.Exception"/> to the log file.
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.Exception)"/>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> occurred</param>
        </member>
        <member name="M:Diagnostic.Logger.FatalAsync(System.String)">
            <summary>
            Save asynchronously the text specified as <see cref="F:Diagnostic.Severity.Fatal"/>
            in the log file. <br/>
            See also <see cref="M:Diagnostic.Logger.LogAsync(System.String,Diagnostic.Severity)"/>
            </summary>
            <param name="text">The text to log</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.DeleteOldLogs(System.String,System.Int32)">
            <summary>
            Delete the old logs if necessary
            </summary>
            <param name="logPath">The log file path</param>
            <param name="timeSpanAsDays">The time span of file that has to be keep saved (in days)</param>
        </member>
        <member name="M:Diagnostic.Logger.DeleteLogs(System.Int32,System.String[])">
            <summary>
            Deletes old log files saved in disk after they have been retrieved (see <see cref="M:Diagnostic.Logger.DeleteOldLogs(System.String,System.Int32)"/>
            </summary>
            <param name="timeSpanAsDays">The time span of file that has to be keep saved (in days)</param>
            <param name="files">The <see cref="T:System.String"/> array containing the log files path</param>
        </member>
        <member name="M:Diagnostic.Logger.CreateEntry(Diagnostic.Severity,System.String,System.String,System.String)">
            <summary>
            Create an entry as a <see cref="T:System.Tuple"/>
            </summary>
            <param name="severity">The <see cref="T:Diagnostic.Severity"/></param>
            <param name="source">The source</param>
            <param name="message">The message</param>
            <param name="stackTrace">The <see cref="T:System.Diagnostics.StackTrace"/> (as <see cref="T:System.String"/>)</param>
            <returns>The <see cref="T:Diagnostic.Logger.ExceptionEntry"/> containing the entry</returns>
        </member>
        <member name="M:Diagnostic.Logger.BuildLogEntry(System.String,Diagnostic.Severity)">
            <summary>
            Build a new log entry
            </summary>
            <param name="text">The text to log</param>
            <param name="severity">The <see cref="T:Diagnostic.Severity"/> of the entry</param>
            <returns>The new entry to log</returns>
        </member>
        <member name="M:Diagnostic.Logger.BuildLogEntry(System.Exception)">
            <summary>
            Build a new log entry
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to log</param>
            <returns>A <see cref="T:Diagnostic.Logger.ExceptionEntry"/> containing the new entry</returns>
        </member>
        <member name="M:Diagnostic.Logger.CheckException(System.Exception)">
            <summary>
            Check if an <see cref="T:System.Exception"/> has already been logged
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to check</param>
            <returns><see langword="false"/> if an <see cref="T:System.Exception"/> has not yet been logged, <see langword="true"/> otherwise (negated logic)</returns>
        </member>
        <member name="M:Diagnostic.Logger.AppendText(System.String)">
            <summary>
            Append text on the log file. See <see cref="M:IO.FileHandler.Save(System.String,System.String,IO.FileHandler.SaveMode)"/>.
            </summary>
            <param name="text">The text to append</param>
        </member>
        <member name="M:Diagnostic.Logger.AppendTextAsync(System.String,System.Boolean)">
            <summary>
            Append text on the log file asynchronously. See <see cref="M:IO.FileHandler.SaveAsync(System.String,System.String,IO.FileHandler.SaveMode)"/>
            </summary>
            <param name="text">The text to append</param>
            <param name="hasToWait"><see langword="true"/> if the task has to wait for a semaphore, <see langword="false"/> otherwise</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.AppendText(Diagnostic.Logger.ExceptionEntry)">
            <summary>
            Append an <see cref="T:Diagnostic.Logger.ExceptionEntry"/> to the log file
            </summary>
            <param name="entry">The <see cref="T:Diagnostic.Logger.ExceptionEntry"/> containing the element to append</param>
        </member>
        <member name="M:Diagnostic.Logger.AppendTextAsync(Diagnostic.Logger.ExceptionEntry)">
            <summary>
            Append asynchronously an <see cref="T:Diagnostic.Logger.ExceptionEntry"/> to the log file
            </summary>
            <param name="entry">The <see cref="T:Diagnostic.Logger.ExceptionEntry"/> containing the element to append</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.GetSeverityAsString(Diagnostic.Severity)">
            <summary>
            Convert the <see cref="T:Diagnostic.Severity"/> of the entry to log in a <see cref="T:System.String"/>
            </summary>
            <param name="severity">The <see cref="T:Diagnostic.Severity"/> of the entry</param>
            <returns>The <see cref="T:System.String"/> result of the conversion</returns>
        </member>
        <member name="M:Diagnostic.Logger.GetReadableSeverityAsString(Diagnostic.Severity)">
            <summary>
            Convert the <see cref="T:Diagnostic.Severity"/> of the entry to log in a readable <see cref="T:System.String"/> (i.e. removing all unnecessary characters as white spaces)
            </summary>
            <param name="severity"> The severity (<see cref="T:Diagnostic.Severity"/>) of the entry </param>
            <returns>The <see cref="T:System.String"/> result of the conversion</returns>
        </member>
        <member name="M:Diagnostic.Logger.GetDateTime">
            <summary>
            Get the <see cref="T:System.DateTime"/> in the format "yyyy/MM/dd-HH:mm:ss:fff". <br/>
            For example: 2021/02/25-09:32:44:123.
            </summary>
            <returns>The <see cref="T:System.String"/> representing the <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.GetUtcDateTime">
            <summary>
            Get the UTC <see cref="T:System.DateTime"/> in the format "yyyy/MM/dd-HH:mm:ss:fff". <br/>
            For example: 2021/02/25-09:32:44:123.
            </summary>
            <returns>The <see cref="T:System.String"/> representing the <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:Diagnostic.Logger.IsSameExceptionAsTheLast(System.Exception)">
            <summary>
            Check if the new <see cref="T:System.Exception"/> is the same as the last one, in other words:
            <list type="bullet">
            <term>they are of the same <see cref="T:System.Type"/></term>
            </list>
            <list type="bullet">
            <term>they have the same <see cref="P:System.Exception.Message"/></term>
            </list>
            <list type="bullet">
            <term>they have the same <see cref="T:System.Diagnostics.StackTrace"/></term>
            </list>
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/>to test </param>
            <returns><see langword="true"/> if is the new <see cref="T:System.Exception"/> is equal to the last one, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Diagnostic.Logger.HasHigherSeverityLevel(Diagnostic.Severity)">
            <summary>
            Test if the entry to log has an higher (or equal) <see cref="T:Diagnostic.Severity"/> level than the <see cref="P:Diagnostic.Logger.MinimumSeverityLevel"/> set
            </summary>
            <param name="level">The <see cref="T:Diagnostic.Severity"/> level to test</param>
            <returns> <see langword="true"/> if the level to test is higher (or equals) to <see cref="P:Diagnostic.Logger.MinimumSeverityLevel"/>, <see langword="false"/> otherwise </returns>
        </member>
        <member name="T:Diagnostic.LogReader">
            <summary>
            Class the continuously read a log file.
            See also <see cref="T:Diagnostic.Logger"/>
            </summary>
        </member>
        <member name="P:Diagnostic.LogReader.LogText">
            <summary>
            The full log text with all the entries
            </summary>
        </member>
        <member name="P:Diagnostic.LogReader.LastLog">
            <summary>
            The last log entry
            </summary>
        </member>
        <member name="P:Diagnostic.LogReader.LogPath">
            <summary>
            The log file path
            </summary>
        </member>
        <member name="P:Diagnostic.LogReader.Reading">
            <summary>
            Define whether the log file is being read (<see langword="true"/>)
            or not (<see langword="false"/>)
            </summary>
        </member>
        <member name="P:Diagnostic.LogReader.MonitoringInterval">
            <summary>
            The monitoring interval in milliseconds
            </summary>
        </member>
        <member name="M:Diagnostic.LogReader.StartRead(System.Int32)">
            <summary>
            Start the read of the log file.
            </summary>
            <param name="pollingInterval">The monitoring interval (in milliseconds)</param>
            <remarks>The <see cref="T:Diagnostic.Logger"/> must be <see cref="P:Diagnostic.Logger.Initialized"/></remarks>
        </member>
        <member name="M:Diagnostic.LogReader.CreateMonitoringTask">
            <summary>
            Create the log file monitoring <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
            <returns>The monitoring <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Diagnostic.Timer">
            <summary>
            Provide useful time-related instructions
            </summary>
        </member>
        <member name="P:Diagnostic.Timer.ElapsedTime">
            <summary>
            The first stored elapsed time in milliseconds
            </summary>
            <remarks>
            If no time value is stored, this property will contain
            <see langword="0d"/> as its default value
            </remarks>
        </member>
        <member name="M:Diagnostic.Timer.Initialize">
            <summary>
            Initialize the <see cref="T:Diagnostic.Timer"/> class
            </summary>
        </member>
        <member name="M:Diagnostic.Timer.Start">
            <summary>
            Start a new time counter
            </summary>
        </member>
        <member name="M:Diagnostic.Timer.Stop">
            <summary>
            Stop the first active time counter and retrieve its elapsed time in milliseconds
            </summary>
            <remarks>
            This method stop the actual running timer and enqueue its associated elapsed time, so do <b>not</b>
            call <see cref="P:Diagnostic.Timer.ElapsedTime"/> if you are interested in the actual elapsed time associated to the running timer
            and use <see cref="P:Diagnostic.Timer.ElapsedTime"/> for the elapsed time (in milliseconds)
            </remarks>
        </member>
        <member name="M:Diagnostic.Timer.GetElapsedTime">
            <summary>
            Stop the first active time counter and retrieve its elapsed time
            </summary>
            <returns>The elapsed time (in milliseconds)</returns>
            <remarks>
            This method internally call the <see cref="M:Diagnostic.Timer.Stop"/> method, so do <b>not</b>
            call it if you are interested in the actual elapsed time associated to the running timer
            </remarks>
        </member>
    </members>
</doc>
