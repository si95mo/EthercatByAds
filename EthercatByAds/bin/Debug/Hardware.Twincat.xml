<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hardware.Twincat</name>
    </assembly>
    <members>
        <member name="T:Hardware.Twincat.ITwincatChannel">
            <summary>
            Describe a generic prototype for a Twincat channel
            </summary>
        </member>
        <member name="P:Hardware.Twincat.ITwincatChannel.VariableName">
            <summary>
            The Twincat variable name
            </summary>
        </member>
        <member name="M:Hardware.Twincat.ITwincatChannel.Attach">
            <summary>
            Attach the <see cref="T:Hardware.Twincat.ITwincatChannel"/> to the resource instance
            </summary>
        </member>
        <member name="T:Hardware.Twincat.TwincatAnalogInput">
            <summary>
            Implement a Twincat analog input
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatAnalogInput.#ctor(System.String,System.String,Hardware.IResource,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatAnalogInput"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name in Twincat</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
            <param name="measureUnit">The measure unit</param>
            <param name="format">The format</param>
        </member>
        <member name="T:Hardware.Twincat.TwincatAnalogOutput">
            <summary>
            Implement a Twincat analog output
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatAnalogOutput.#ctor(System.String,System.String,Hardware.IResource,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatAnalogOutput"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name in Twincat</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
            <param name="measureUnit">The measure unit</param>
            <param name="format">The format</param>
        </member>
        <member name="T:Hardware.Twincat.TwincatChannel`1">
            <summary>
            Describe a generic Twincat channel
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Hardware.Twincat.TwincatChannel`1.#ctor(System.String,System.String,Hardware.IResource,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatChannel`1"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name in Twincat</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
            <param name="measureUnit">The measure unit</param>
            <param name="format">The format</param>
        </member>
        <member name="T:Hardware.Twincat.TwincatDigitalInput">
            <summary>
            Implement a Twincat digital input
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatDigitalInput.#ctor(System.String,System.String,Hardware.IResource)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatDigitalInput"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
        </member>
        <member name="T:Hardware.Twincat.TwincatDigitalOutput">
            <summary>
            Implement a Twincat digital output
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatDigitalOutput.#ctor(System.String,System.String,Hardware.IResource)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatDigitalOutput"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name in Twincat</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
        </member>
        <member name="T:Hardware.Twincat.TwincatMultiSampleAnalogInput">
            <summary>
            Implement a Twincat multi-sample analog input
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatMultiSampleAnalogInput.#ctor(System.String,System.String,Hardware.IResource,System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatMultiSampleAnalogInput"/>
            </summary>
            <param name="code">The code</param>
            <param name="variableName">The variable name in Twincat</param>
            <param name="resource">The <see cref="T:Hardware.IResource"/></param>
            <param name="measureUnit">The measure unit</param>
            <param name="format">The format</param>
        </member>
        <member name="T:Hardware.Twincat.TwincatResource">
            <summary>
            Implement a resource that communicate with TwinCAT via the Ads protocol
            </summary>
        </member>
        <member name="F:Hardware.Twincat.TwincatResource.NotificationTransactionMode">
            <summary>
            The <see cref="T:TwinCAT.Ads.AdsTransMode"/>
            </summary>
        </member>
        <member name="P:Hardware.Twincat.TwincatResource.AmsNetAddress">
            <summary>
            The ams net address
            </summary>
        </member>
        <member name="P:Hardware.Twincat.TwincatResource.Port">
            <summary>
            The port number
            </summary>
        </member>
        <member name="P:Hardware.Twincat.TwincatResource.PollingInterval">
            <summary>
            The <see cref="T:Hardware.Twincat.TwincatResource"/> polling interval (in milliseconds)
            </summary>
        </member>
        <member name="P:Hardware.Twincat.TwincatResource.MaximumDelayBetweenNotifications">
            <summary>
            The maximum delay between each notification (in milliseconds)
            </summary>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:Hardware.Twincat.TwincatResource"/> by specifying both the ams net address and the port of the Ads server
            </summary>
            <remarks>
            If <paramref name="amsNetAddress"/> is equal to <see cref="F:System.String.Empty"/>, then the connection will be established to the local ads server
            </remarks>
            <param name="code">The code</param>
            <param name="amsNetAddress">The PLC ams net address</param>
            <param name="port">The port number</param>
            <param name="pollingInterval">The polling interval (in milliseconds)</param>
            <param name="maximumDelayBetweenNotifications">The maximum delay between each ads notification (in millisecond)</param>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of <see cref="T:Hardware.Twincat.TwincatResource"/> by specifying only the port number of the Ads server
            </summary>
            <remarks>
            This version of the constructor should be used when the connection has to be established to a local ADS server (only the port is needed in this case)
            </remarks>
            <param name="code">The code</param>
            <param name="port">The port number</param>
            <param name="pollingInterval">The polling interval (in milliseconds)</param>
            <param name="maximumDelayBetweenNotifications">The maximum delay between each ads notification (in millisecond)</param>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.InvokeRpcMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Call an RPC (Remote Procedure Call) method
            </summary>
            <typeparam name="T">The return value type</typeparam>
            <param name="symbolPath">The method instance path (i.e. MAIN.fbCalculator)</param>
            <param name="methodName">The method name (i.e. Sum)</param>
            <param name="parameters">The array of parameters</param>
            <returns>The result of the call</returns>
            <exception cref="T:System.Exception">An <see cref="T:System.Exception"/> in case of invalid RPC call</exception>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.IsAValidType(System.Type)">
            <summary>
            Determine wheather <paramref name="type"/> is valid or not
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test</param>
            <returns><see langword="true"/> if <paramref name="type"/> is valid, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.SetArguments(TwinCAT.Ads.AdsBinaryWriter,System.Object[])">
            <summary>
            Set the arguments of an RPC call
            </summary>
            <param name="binaryWriter">The <see cref="T:TwinCAT.Ads.AdsBinaryWriter"/></param>
            <param name="parameters">The parameters array</param>
            <exception cref="T:System.Exception">An <see cref="T:System.Exception"/> in case of invalid parameters <see cref="T:System.Type"/></exception>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.GetReturnValue``1(TwinCAT.Ads.AdsBinaryReader,System.Int32)">
            <summary>
            Get the return value of an RPC call
            </summary>
            <typeparam name="T">The return <see cref="T:System.Type"/></typeparam>
            <param name="binaryReader">The <see cref="T:TwinCAT.Ads.AdsBinaryReader"/></param>
            <param name="byteCount">The number of bytes</param>
            <returns>The return value</returns>
            <exception cref="T:System.Exception">An <see cref="T:System.Exception"/> in case of invalid parameters <see cref="T:System.Type"/></exception>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.GetRPCReturnArray``1(TwinCAT.Ads.AdsBinaryReader,System.Int32)">
            <summary>
            Get the return value of an RPC call in case of an array
            </summary>
            <typeparam name="T">The return <see cref="T:System.Type"/></typeparam>
            <param name="binaryReader">The <see cref="T:TwinCAT.Ads.AdsBinaryReader"/></param>
            <param name="byteCount">The number of bytes</param>
            <returns>The return value</returns>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.GetParameterSize(System.Object)">
            <summary>
            Get a <paramref name="parameter"/> size in bytes
            </summary>
            <param name="parameter">The parameter of which retrieve the size</param>
            <returns>The size of <paramref name="parameter"/></returns>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.GetTypeSizeInBeckhoff(System.Type)">
            <summary>
            Get the size of a type as defined by Beckhoff
            </summary>
            <param name="dotNetType">The <see cref="T:System.Type"/> inside the .net framework</param>
            <returns>The retrieved size</returns>
        </member>
        <member name="M:Hardware.Twincat.TwincatResource.InitializeResource">
            <summary>
            Initialize the <see cref="T:Hardware.Twincat.TwincatResource"/> status
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardware.Twincat.TwincatResource.TryGetInstance(Hardware.Twincat.ITwincatChannel,TwinCAT.TypeSystem.ISymbol@)" -->
    </members>
</doc>
